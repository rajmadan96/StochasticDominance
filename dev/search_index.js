var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"```@docs StochasticDominanceMeanReturn StochasticDominanceRiskMeasure AuxiliaryFunc.safeexponent AuxiliaryFunc.simplex1 AuxiliaryFunc.simplex2 AuxiliaryFunc.gpminus1 AuxiliaryFunc.gp AuxiliaryFunc.gbar AuxiliaryFunc.boundary_moments AuxiliaryFunc.CheckConvergenceSimplex AuxiliaryFunc.CheckConvergenceSD AuxiliaryFunc.MeanReturn AuxiliaryFunc.plotOptimalAssetAllocationMeanReturn AuxiliaryFunc.RiskFunction AuxiliaryFunc.BenchmarkRiskFunction AuxiliaryFunc.plotOptimalAssetAllocationRiskFunction Newton PSO ","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = StochasticDominance","category":"page"},{"location":"#StochasticDominance","page":"Home","title":"StochasticDominance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for StochasticDominance.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [StochasticDominance,AuxiliaryFunc,NewtonOpt,PSOOpt]","category":"page"},{"location":"#StochasticDominance.StochasticDominanceMeanReturn-NTuple{5, Any}","page":"Home","title":"StochasticDominance.StochasticDominanceMeanReturn","text":"StochasticDominanceMeanReturn(ξ, ξ_0, p_ξ, p_ξ_0, SDorder; ε=1e-7, max_iter=50, n_particles=200, verbose=false, plot=false)\n\nSolve a portfolio optimization problem under stochastic dominance constraints to maximize the expected return.\n\nArguments\n\nξ::AbstractMatrix{<:Number}: Portfolio return scenarios.\nξ_0::AbstractVector{<:Number}: Benchmark return scenarios.\np_ξ::AbstractVector{<:Number}: Probability distribution over portfolio scenarios.\np_ξ_0::AbstractVector{<:Number}: Probability distribution over benchmark scenarios.\nSDorder::Int: Order of stochastic dominance.\nε::Float64 (optional, default = 1e-7): Convergence tolerance.\nmax_iter::Int (optional, default = 50): Maximum iterations for optimization.\nn_particles::Int (optional, default = 200): Number of particles for PSO.\nverbose::Bool (optional, default = false): Print convergence details.\nplot::Bool (optional, default = false): Plot the optimal asset allocation.\n\nReturns\n\nA tuple (x_opt, t_opt), where:\nx_opt: Optimized portfolio weights.\nt_opt: Auxiliary optimization variable.\n\nExamples\n\nStochasticDominanceMeanReturn([2 3; 5 6], [2,3,4], [0.5,0.5], [0.2,0.3,0.5], 2, plot=true)\n\nSolves the portfolio optimization problem under stochastic dominance constraints.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.StochasticDominanceRiskMeasure-NTuple{5, Any}","page":"Home","title":"StochasticDominance.StochasticDominanceRiskMeasure","text":"StochasticDominanceRiskMeasure(ξ, ξ_0, p_ξ, p_ξ_0, SDorder; β=0.5, ε=1e-7, max_iter=50, n_particles=200, verbose=false, plot=false)\n\nSolve a portfolio optimization problem under stochastic dominance risk constraints using Particle Swarm Optimization (PSO)  and Newton's method for refinement.\n\nArguments\n\nξ::AbstractMatrix{<:Number}: Portfolio return scenarios.\nξ_0::AbstractVector{<:Number}: Benchmark return scenarios.\np_ξ::AbstractVector{<:Number}: Probability distribution over portfolio scenarios.\np_ξ_0::AbstractVector{<:Number}: Probability distribution over benchmark scenarios.\nSDorder::Int: Order of stochastic dominance.\nβ::Number (optional, default = 0.5): Confidence level for risk measurement.\nε::Float64 (optional, default = 1e-7): Convergence tolerance.\nmax_iter::Int (optional, default = 50): Maximum iterations for optimization.\nn_particles::Int (optional, default = 200): Number of particles for PSO.\nverbose::Bool (optional, default = false): Print convergence details.\nplot::Bool (optional, default = false): Plot the optimal asset allocation.\n\nReturns\n\nA tuple (x_opt, q_opt, t_opt), where:\nx_opt: Optimized portfolio weights.\nq_opt: Optimized risk threshold parameter.\nt_opt: Auxiliary optimization variable.\n\nExamples\n\nStochasticDominanceRiskMeasure([2 3; 5 6], [2,3,4], [0.5,0.5], [0.2,0.3,0.5], 2, β=0.95, plot=true)\n\nSolves the portfolio optimization problem under stochastic dominance constraints.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.BenchmarkRiskFunction-NTuple{5, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.BenchmarkRiskFunction","text":"BenchmarkRiskFunction(q, ξ_0, p, p_ξ_0, β)\n\nCompute the risk function for the benchmark portfolio using a distortion risk measure,  capturing higher-order moments and tail risk.\n\nArguments\n\nq::Number: Risk threshold parameter.\nξ_0::AbstractVector{<:Number}: Benchmark returns.\np::Number: Exponent parameter controlling tail risk sensitivity.\np_ξ_0::AbstractVector{<:Number}: Probability distribution over the benchmark scenarios.\nβ::Number: Confidence level (closer to 1 indicates higher aversion).\n\nReturns\n\nA numeric value representing the benchmark risk function\n\nExamples\n\nBenchmarkRiskFunction(1.5, [2, 3, 4], 3, [0.2, 0.3, 0.5], 0.95)  \n# Computes the benchmark risk function for the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.CheckConvergenceSD-NTuple{7, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.CheckConvergenceSD","text":"CheckConvergenceSD(x, t, ξ, ξ_0, p, p_ξ, p_ξ_0)\n\nEvaluate the convergence of a given portfolio x to satisfy stochastic dominance constraints  by computing the norm of constraint violations.\n\nArguments\n\nx::AbstractVector{<:Number}: Portfolio weights (simplex).\nt::Number: A scalar threshold value for dominance constraints.\nξ::AbstractVector{<:Number}: Portfolio returns.\nξ_0::AbstractVector{<:Number}: Benchmark returns.\np::Integer: The order of stochastic dominance.\np_ξ::AbstractVector{<:Number}: Probability of portfolio ξ.\np_ξ_0::AbstractVector{<:Number}: Probability of benchmark ξ_0.\n\nReturns\n\nA numeric value representing the norm of stochastic dominance constraint violations:\nUses g_p(t, x, ξ, ξ_0, p, p_ξ, p_ξ_0) to evaluate the primary dominance constraint.\nUses g_p_minus_1(t, x, ξ, ξ_0, p, p_ξ, p_ξ_0) to check lower-order dominance.\nUses g_bar(x, ξ, ξ_0, p, p_ξ, p_ξ_0) to compute the upper bound constraint.\nUses boundary_moments(x, ξ, p_ξ, p_ξ_0, ξ_0, p) to ensure moment-based dominance.\nReturns the norm of these combined constraints.\n\nExamples\n\nCheckConvergenceSD([0.7, 0.3], 5, [2  3; 5 6], [2,3,4], 3, [0.5,0.5], [0.2,0.3,0.5])  \n# Computes the norm of stochastic dominance constraint violations.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.CheckConvergenceSimplex-Tuple{Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.CheckConvergenceSimplex","text":"CheckConvergenceSimplex(x)\n\nEvaluate the convergence of a given vector x to a simplex by computing the norm  of its deviation from simplex constraints.\n\nArguments\n\nx::AbstractVector{<:Number}: A vector representing portfolio weights or probabilities.\n\nReturns\n\nA numeric value representing the norm of simplex constraint violations:\nUses simplex1(x) to check if the sum of elements deviates from 1.\nUses simplex2(x) to check for negative elements.\nReturns the norm of the concatenated constraint violations.\n\nExamples\n\nCheckConvergenceSimplex([0.4, 0.6])    # Expected output: 0.0 (valid simplex)\nCheckConvergenceSimplex([0.5, 0.7])    # Nonzero output (sum > 1)\nCheckConvergenceSimplex([0.5, -0.2])   # Nonzero output (contains negative values)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.MeanReturn-Tuple{Any, Any, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.MeanReturn","text":"MeanReturn(x, ξ, p_ξ)\n\nCompute the expected return of a portfolio given asset returns and probabilities.\n\nArguments\n\nx::AbstractVector{<:Number}: Portfolio weights (simplex).\nξ::AbstractMatrix{<:Number}: Matrix of asset returns (each column represents a scenario).\np_ξ::AbstractVector{<:Number}: Probability distribution over the scenarios.\n\nReturns\n\nA numeric value representing the expected portfolio return \n\nExamples\n\nMeanReturn([0.7, 0.3], [2  3; 5 6], [0.5,0.5])  \n# Computes the expected portfolio return.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.RiskFunction-NTuple{6, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.RiskFunction","text":"RiskFunction(x, q, ξ, p, p_ξ, β)\n\nCompute the risk function based on a distortion risk measure, incorporating  higher-order moments and tail risk.\n\nArguments\n\nx::AbstractVector{<:Number}: Portfolio weights.\nq::Number: Risk threshold parameter.\nξ::AbstractMatrix{<:Number}: Matrix of asset returns (each column represents a scenario).\np::Number: Exponent parameter controlling tail risk sensitivity.\np_ξ::AbstractVector{<:Number}: Probability distribution over the scenarios.\nβ::Number: Confidence level (closer to 1 indicates higher aversion).\n\nReturns\n\nA numeric value representing the risk function  \n\nExamples\n\nRiskFunction([0.4, 0.6], 1.5, [2  3; 5 6], 3, [0.5,0.5], 0.95)  \n# Computes the risk function for the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.boundary_moments-NTuple{6, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.boundary_moments","text":"boundarymoments(x, ξ, pξ, pξ0, ξ_0, p)\n\nCompute the boundary moments for higher-order stochastic dominance constraints by comparing  the moments of the portfolio and benchmark distributions.\n\nArguments\n\nx::AbstractVector{<:Number}: Portfolio weights (simplex constraint).\nξ::AbstractMatrix{<:Number}: Portfolio returns.\np_ξ::AbstractVector{<:Number}: Probability distribution of the portfolio returns ξ.\np_ξ_0::AbstractVector{<:Number}: Probability distribution of the benchmark returns ξ_0.\nξ_0::AbstractVector{<:Number}: Benchmark returns.\np::Real: The highest moment order. If p is an integer, boundary_moments_integer is used. If p is non-integer, boundary_moments_noninteger is used.\n\nReturns\n\nA vector containing computed moment constraints:\nFor k = 1: Compares the mean of the portfolio and benchmark.\nFor k ≥ 2: Computes and compares the central moments.\nIf the portfolio moment does not exceed the benchmark moment, the value is set to zero.\nOtherwise, the result stores the norm of the difference.\n\nMethodology\n\nInteger Case (p is an integer):\nComputes moments from order 1 order p.\nUses the function boundary_moments_integer.\nNon-Integer Case (p is a non-integer):\nComputes moments from order (0,1) order p\nUses the function boundary_moments_noninteger.\n\nExamples\n\n# Example 1: Integer order moments\nboundary_moments([0.7, 0.3], [2 3; 5 6], [0.5, 0.5], [0.2, 0.3, 0.5], [2, 3, 4], 3)\n\n# Example 2: Non-integer order moments\nboundary_moments([0.7, 0.3], [2 3; 5 6], [0.5, 0.5], [0.2, 0.3, 0.5], [2, 3, 4], 2.7)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.g_bar-NTuple{6, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.g_bar","text":"g_bar(x, ξ, ξ_0, p, p_ξ, p_ξ_0)\n\nCompute the verification of the higher-order stochastic dominance constraint by evaluating g_p over sorted benchmark values.\n\nArguments\n\nx::AbstractVector{<:Number}: Portfolio weights (simplex).\nξ::AbstractVector{<:Number}: Portfolio returns.\nξ_0::AbstractVector{<:Number}: Benchmark returns.\np::Number: The exponent parameter.\np_ξ::AbstractVector{<:Number}: Probability of portfolio ξ.\np_ξ_0::AbstractVector{<:Number}: Probability of benchmark ξ_0.\n\nReturns\n\nA numeric value computed as max(max_value, 0.0), where:\nmax_value is the maximum of g_p(t, x, ξ, ξ_0, p, p_ξ, p_ξ_0) over sorted ξ_0.\nIf max_value is negative, the function returns 0.0.\nIf max_value is positive, the selected portfolio or the portfolio with assigned weights does not satisfy the dominance condition.\"\n\nExamples\n\ng_bar([0.7, 0.3], [2  3; 5 6], [2,3,4], 3, [0.5,0.5], [0.2,0.3,0.5])  \n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.g_p-NTuple{7, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.g_p","text":"g_p(t, x, ξ, ξ_0, p, p_ξ, p_ξ_0)\n\nCompute the higher-order stochastic dominance constraint for a single t, where t ∈ R.\n\nArguments\n\nt::Number: A scalar threshold value.\nx::AbstractVector{<:Number}: Portfolio weights (simplex).\nξ::AbstractVector{<:Number}: Portfolio returns.\nξ_0::Number: Benchmark returns.\np::Number: The exponent parameter.\np_ξ::Number: Probability of portfolio ξ.\np_ξ_0::Number: Probability of benchmark ξ_0.\n\nReturns\n\nA numeric value computed as term1[1] - term2[1], where:\nterm1 involves safe_exponent applied to max(t - x' * ξ, 0), scaled by p_ξ.\nterm2 involves safe_exponent applied to max(t - ξ_0, 0), scaled by p_ξ_0.\n\nExamples\n\ng_p(5, [0.7, 0.3], [2  3; 5 6], [2,3], 3, [0.5,0.5], [0.2,0.8])  \n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.g_p_minus_1-NTuple{7, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.g_p_minus_1","text":"g_p_minus_1(t, x, ξ, ξ_0, p, p_ξ, p_ξ_0)\n\nCompute the derivative of Higher order stochastic domiance constraint for single t, where t ∈ R. \n\nArguments\n\nt::Number: A scalar threshold value.\nx::AbstractVector{<:Number}: portfolio weights (simplex).\nξ::AbstractVector{<:Number}: portfolio.\nξ_0::Number: Benchmark returns.\np::Number: The exponent parameter.\np_ξ::Number: Probability of portfolio ξ.\np_ξ_0::Number: Probability of benchmark  ξ_0.\n\nReturns\n\nA numeric value computed as term1[1] - term2[1], where:\nterm1 involves safe_exponent applied to max(t - x' * ξ, 0), scaled by p_ξ.\nterm2 involves safe_exponent applied to max(t - ξ_0, 0), scaled by p_ξ_0.\n\nExamples\n\ng_p_minus_1(5, [0.7, 0.3], [2  3; 5 6], [2,3], 3, [0.5,0.5], [0.2,0.8])  \n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.plotOptimalAssetAllocationMeanReturn-NTuple{5, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.plotOptimalAssetAllocationMeanReturn","text":"plotOptimalAssetAllocationMeanReturn(x, ξ, p_ξ, ξ_0, p_ξ_0)\n\nPlot the optimal asset allocation as a pie chart, displaying portfolio weights  and comparing mean return to a benchmark.\n\nArguments\n\nx::AbstractVector{<:Number}: Portfolio weights (simplex).\nξ::AbstractMatrix{<:Number}: Matrix of asset returns (each column represents a scenario).\np_ξ::AbstractVector{<:Number}: Probability distribution over the portfolio scenarios.\nξ_0::AbstractVector{<:Number}: Benchmark returns.\np_ξ_0::AbstractVector{<:Number}: Probability distribution over the benchmark scenarios.\n\nReturns\n\nA pie chart illustrating the portfolio weights.\nAnnotates the mean return and benchmark return.\n\nExamples\n\nplotOptimalAssetAllocationMeanReturn([0.4, 0.6], [2  3; 5 6], [0.5,0.5], [2,3], [0.2,0.8])  \n# Generates a pie chart of asset allocation and displays mean return vs. benchmark.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.plotOptimalAssetAllocationRiskFunction-NTuple{7, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.plotOptimalAssetAllocationRiskFunction","text":"plotOptimalAssetAllocationRiskFunction(x, q, ξ, p_ξ, ξ_0, p_ξ_0, p)\n\nPlot the optimal asset allocation as a pie chart, displaying portfolio weights and comparing  the portfolio risk function to the benchmark risk function.\n\nArguments\n\nx::AbstractVector{<:Number}: Portfolio weights (simplex).\nq::Number: Risk threshold parameter.\nξ::AbstractMatrix{<:Number}: Matrix of asset returns (each column represents a scenario).\np_ξ::AbstractVector{<:Number}: Probability distribution over the portfolio scenarios.\nξ_0::AbstractVector{<:Number}: Benchmark returns.\np_ξ_0::AbstractVector{<:Number}: Probability distribution over the benchmark scenarios.\np::Number: Exponent parameter controlling tail risk sensitivity.\n\nReturns\n\nA pie chart illustrating the portfolio weights.\nAnnotates the optimal portfolio risk and benchmark risk.\n\nExamples\n\nplotOptimalAssetAllocationRiskFunction([0.4, 0.6], 1.5, [2  3; 5 6], [0.5,0.5], [2,3], [0.2,0.8], 3)  \n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.safe_exponent-Tuple{Any, Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.safe_exponent","text":"safe_exponent(base, exponent)\n\nCompute base^exponent while handling the indeterminate case 0^0.\n\nArguments\n\nbase::Number: The base value.\nexponent::Number: The exponent value.\n\nReturns\n\nbase^exponent if (base, exponent) ≠ (0, 0).\n0.0 if base == 0 and exponent == 0.\n\nExamples\n\nsafe_exponent(2, 3)   # 8\nsafe_exponent(5, 0)   # 1\nsafe_exponent(0, 5)   # 0\nsafe_exponent(0, 0)   # 0.0\nsafe_exponent(2, -2)  # 0.25\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.simplex1-Tuple{Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.simplex1","text":"simplex1(x)\n\nCompute 1 - sum(x), which represents the residual of the sum of elements in x from 1.\n\nArguments\n\nx::AbstractArray{<:Number}: An array of numerical values.\n\nReturns\n\nA numeric value representing 1 - sum(x).\n\nExamples\n\nsimplex1([0.2, 0.3, 0.1])  # 0.4\nsimplex1([0.5, 0.5])       # 0.0\nsimplex1([1.2, -0.3])      # 0.1\n\n\n\n\n\n","category":"method"},{"location":"#StochasticDominance.AuxiliaryFunc.simplex2-Tuple{Any}","page":"Home","title":"StochasticDominance.AuxiliaryFunc.simplex2","text":"simplex2(x)\n\nCompute the element-wise product of x and a boolean mask indicating negative values in x.  This function extracts the negative components of x.\n\nArguments\n\nx::AbstractArray{<:Number}: An array of numerical values.\n\nReturns\n\nAn array where negative elements of x are preserved, and non-negative elements are replaced with 0.\n\nExamples\n\nsimplex2([1, -2, 3, -4])   # [0, -2, 0, -4]\nsimplex2([0.5, -0.1, 0])   # [0.0, -0.1, 0.0]\nsimplex2([-3, -2, -1])     # [-3, -2, -1]\n\n\n\n\n\n","category":"method"}]
}
